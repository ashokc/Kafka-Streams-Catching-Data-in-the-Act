/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.xplordat.rtmonitoring.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Triangle extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1245280593811346670L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Triangle\",\"namespace\":\"com.xplordat.rtmonitoring.avro\",\"fields\":[{\"name\":\"timeStart\",\"type\":\"long\"},{\"name\":\"timeInstant\",\"type\":\"long\"},{\"name\":\"timeEnd\",\"type\":\"long\"},{\"name\":\"numberOfAMeasurements\",\"type\":\"int\"},{\"name\":\"numberOfBMeasurements\",\"type\":\"int\"},{\"name\":\"numberOfCMeasurements\",\"type\":\"int\"},{\"name\":\"xA\",\"type\":\"double\"},{\"name\":\"yA\",\"type\":\"double\"},{\"name\":\"xB\",\"type\":\"double\"},{\"name\":\"yB\",\"type\":\"double\"},{\"name\":\"xC\",\"type\":\"double\"},{\"name\":\"yC\",\"type\":\"double\"},{\"name\":\"AB\",\"type\":\"double\"},{\"name\":\"BC\",\"type\":\"double\"},{\"name\":\"AC\",\"type\":\"double\"},{\"name\":\"perimeter\",\"type\":\"double\"},{\"name\":\"area\",\"type\":\"double\"},{\"name\":\"totalDisplacement\",\"type\":\"double\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Triangle> ENCODER =
      new BinaryMessageEncoder<Triangle>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Triangle> DECODER =
      new BinaryMessageDecoder<Triangle>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Triangle> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Triangle> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Triangle>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Triangle to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Triangle from a ByteBuffer. */
  public static Triangle fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public long timeStart;
  @Deprecated public long timeInstant;
  @Deprecated public long timeEnd;
  @Deprecated public int numberOfAMeasurements;
  @Deprecated public int numberOfBMeasurements;
  @Deprecated public int numberOfCMeasurements;
  @Deprecated public double xA;
  @Deprecated public double yA;
  @Deprecated public double xB;
  @Deprecated public double yB;
  @Deprecated public double xC;
  @Deprecated public double yC;
  @Deprecated public double AB;
  @Deprecated public double BC;
  @Deprecated public double AC;
  @Deprecated public double perimeter;
  @Deprecated public double area;
  @Deprecated public double totalDisplacement;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Triangle() {}

  /**
   * All-args constructor.
   * @param timeStart The new value for timeStart
   * @param timeInstant The new value for timeInstant
   * @param timeEnd The new value for timeEnd
   * @param numberOfAMeasurements The new value for numberOfAMeasurements
   * @param numberOfBMeasurements The new value for numberOfBMeasurements
   * @param numberOfCMeasurements The new value for numberOfCMeasurements
   * @param xA The new value for xA
   * @param yA The new value for yA
   * @param xB The new value for xB
   * @param yB The new value for yB
   * @param xC The new value for xC
   * @param yC The new value for yC
   * @param AB The new value for AB
   * @param BC The new value for BC
   * @param AC The new value for AC
   * @param perimeter The new value for perimeter
   * @param area The new value for area
   * @param totalDisplacement The new value for totalDisplacement
   */
  public Triangle(java.lang.Long timeStart, java.lang.Long timeInstant, java.lang.Long timeEnd, java.lang.Integer numberOfAMeasurements, java.lang.Integer numberOfBMeasurements, java.lang.Integer numberOfCMeasurements, java.lang.Double xA, java.lang.Double yA, java.lang.Double xB, java.lang.Double yB, java.lang.Double xC, java.lang.Double yC, java.lang.Double AB, java.lang.Double BC, java.lang.Double AC, java.lang.Double perimeter, java.lang.Double area, java.lang.Double totalDisplacement) {
    this.timeStart = timeStart;
    this.timeInstant = timeInstant;
    this.timeEnd = timeEnd;
    this.numberOfAMeasurements = numberOfAMeasurements;
    this.numberOfBMeasurements = numberOfBMeasurements;
    this.numberOfCMeasurements = numberOfCMeasurements;
    this.xA = xA;
    this.yA = yA;
    this.xB = xB;
    this.yB = yB;
    this.xC = xC;
    this.yC = yC;
    this.AB = AB;
    this.BC = BC;
    this.AC = AC;
    this.perimeter = perimeter;
    this.area = area;
    this.totalDisplacement = totalDisplacement;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return timeStart;
    case 1: return timeInstant;
    case 2: return timeEnd;
    case 3: return numberOfAMeasurements;
    case 4: return numberOfBMeasurements;
    case 5: return numberOfCMeasurements;
    case 6: return xA;
    case 7: return yA;
    case 8: return xB;
    case 9: return yB;
    case 10: return xC;
    case 11: return yC;
    case 12: return AB;
    case 13: return BC;
    case 14: return AC;
    case 15: return perimeter;
    case 16: return area;
    case 17: return totalDisplacement;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: timeStart = (java.lang.Long)value$; break;
    case 1: timeInstant = (java.lang.Long)value$; break;
    case 2: timeEnd = (java.lang.Long)value$; break;
    case 3: numberOfAMeasurements = (java.lang.Integer)value$; break;
    case 4: numberOfBMeasurements = (java.lang.Integer)value$; break;
    case 5: numberOfCMeasurements = (java.lang.Integer)value$; break;
    case 6: xA = (java.lang.Double)value$; break;
    case 7: yA = (java.lang.Double)value$; break;
    case 8: xB = (java.lang.Double)value$; break;
    case 9: yB = (java.lang.Double)value$; break;
    case 10: xC = (java.lang.Double)value$; break;
    case 11: yC = (java.lang.Double)value$; break;
    case 12: AB = (java.lang.Double)value$; break;
    case 13: BC = (java.lang.Double)value$; break;
    case 14: AC = (java.lang.Double)value$; break;
    case 15: perimeter = (java.lang.Double)value$; break;
    case 16: area = (java.lang.Double)value$; break;
    case 17: totalDisplacement = (java.lang.Double)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'timeStart' field.
   * @return The value of the 'timeStart' field.
   */
  public java.lang.Long getTimeStart() {
    return timeStart;
  }

  /**
   * Sets the value of the 'timeStart' field.
   * @param value the value to set.
   */
  public void setTimeStart(java.lang.Long value) {
    this.timeStart = value;
  }

  /**
   * Gets the value of the 'timeInstant' field.
   * @return The value of the 'timeInstant' field.
   */
  public java.lang.Long getTimeInstant() {
    return timeInstant;
  }

  /**
   * Sets the value of the 'timeInstant' field.
   * @param value the value to set.
   */
  public void setTimeInstant(java.lang.Long value) {
    this.timeInstant = value;
  }

  /**
   * Gets the value of the 'timeEnd' field.
   * @return The value of the 'timeEnd' field.
   */
  public java.lang.Long getTimeEnd() {
    return timeEnd;
  }

  /**
   * Sets the value of the 'timeEnd' field.
   * @param value the value to set.
   */
  public void setTimeEnd(java.lang.Long value) {
    this.timeEnd = value;
  }

  /**
   * Gets the value of the 'numberOfAMeasurements' field.
   * @return The value of the 'numberOfAMeasurements' field.
   */
  public java.lang.Integer getNumberOfAMeasurements() {
    return numberOfAMeasurements;
  }

  /**
   * Sets the value of the 'numberOfAMeasurements' field.
   * @param value the value to set.
   */
  public void setNumberOfAMeasurements(java.lang.Integer value) {
    this.numberOfAMeasurements = value;
  }

  /**
   * Gets the value of the 'numberOfBMeasurements' field.
   * @return The value of the 'numberOfBMeasurements' field.
   */
  public java.lang.Integer getNumberOfBMeasurements() {
    return numberOfBMeasurements;
  }

  /**
   * Sets the value of the 'numberOfBMeasurements' field.
   * @param value the value to set.
   */
  public void setNumberOfBMeasurements(java.lang.Integer value) {
    this.numberOfBMeasurements = value;
  }

  /**
   * Gets the value of the 'numberOfCMeasurements' field.
   * @return The value of the 'numberOfCMeasurements' field.
   */
  public java.lang.Integer getNumberOfCMeasurements() {
    return numberOfCMeasurements;
  }

  /**
   * Sets the value of the 'numberOfCMeasurements' field.
   * @param value the value to set.
   */
  public void setNumberOfCMeasurements(java.lang.Integer value) {
    this.numberOfCMeasurements = value;
  }

  /**
   * Gets the value of the 'xA' field.
   * @return The value of the 'xA' field.
   */
  public java.lang.Double getXA() {
    return xA;
  }

  /**
   * Sets the value of the 'xA' field.
   * @param value the value to set.
   */
  public void setXA(java.lang.Double value) {
    this.xA = value;
  }

  /**
   * Gets the value of the 'yA' field.
   * @return The value of the 'yA' field.
   */
  public java.lang.Double getYA() {
    return yA;
  }

  /**
   * Sets the value of the 'yA' field.
   * @param value the value to set.
   */
  public void setYA(java.lang.Double value) {
    this.yA = value;
  }

  /**
   * Gets the value of the 'xB' field.
   * @return The value of the 'xB' field.
   */
  public java.lang.Double getXB() {
    return xB;
  }

  /**
   * Sets the value of the 'xB' field.
   * @param value the value to set.
   */
  public void setXB(java.lang.Double value) {
    this.xB = value;
  }

  /**
   * Gets the value of the 'yB' field.
   * @return The value of the 'yB' field.
   */
  public java.lang.Double getYB() {
    return yB;
  }

  /**
   * Sets the value of the 'yB' field.
   * @param value the value to set.
   */
  public void setYB(java.lang.Double value) {
    this.yB = value;
  }

  /**
   * Gets the value of the 'xC' field.
   * @return The value of the 'xC' field.
   */
  public java.lang.Double getXC() {
    return xC;
  }

  /**
   * Sets the value of the 'xC' field.
   * @param value the value to set.
   */
  public void setXC(java.lang.Double value) {
    this.xC = value;
  }

  /**
   * Gets the value of the 'yC' field.
   * @return The value of the 'yC' field.
   */
  public java.lang.Double getYC() {
    return yC;
  }

  /**
   * Sets the value of the 'yC' field.
   * @param value the value to set.
   */
  public void setYC(java.lang.Double value) {
    this.yC = value;
  }

  /**
   * Gets the value of the 'AB' field.
   * @return The value of the 'AB' field.
   */
  public java.lang.Double getAB() {
    return AB;
  }

  /**
   * Sets the value of the 'AB' field.
   * @param value the value to set.
   */
  public void setAB(java.lang.Double value) {
    this.AB = value;
  }

  /**
   * Gets the value of the 'BC' field.
   * @return The value of the 'BC' field.
   */
  public java.lang.Double getBC() {
    return BC;
  }

  /**
   * Sets the value of the 'BC' field.
   * @param value the value to set.
   */
  public void setBC(java.lang.Double value) {
    this.BC = value;
  }

  /**
   * Gets the value of the 'AC' field.
   * @return The value of the 'AC' field.
   */
  public java.lang.Double getAC() {
    return AC;
  }

  /**
   * Sets the value of the 'AC' field.
   * @param value the value to set.
   */
  public void setAC(java.lang.Double value) {
    this.AC = value;
  }

  /**
   * Gets the value of the 'perimeter' field.
   * @return The value of the 'perimeter' field.
   */
  public java.lang.Double getPerimeter() {
    return perimeter;
  }

  /**
   * Sets the value of the 'perimeter' field.
   * @param value the value to set.
   */
  public void setPerimeter(java.lang.Double value) {
    this.perimeter = value;
  }

  /**
   * Gets the value of the 'area' field.
   * @return The value of the 'area' field.
   */
  public java.lang.Double getArea() {
    return area;
  }

  /**
   * Sets the value of the 'area' field.
   * @param value the value to set.
   */
  public void setArea(java.lang.Double value) {
    this.area = value;
  }

  /**
   * Gets the value of the 'totalDisplacement' field.
   * @return The value of the 'totalDisplacement' field.
   */
  public java.lang.Double getTotalDisplacement() {
    return totalDisplacement;
  }

  /**
   * Sets the value of the 'totalDisplacement' field.
   * @param value the value to set.
   */
  public void setTotalDisplacement(java.lang.Double value) {
    this.totalDisplacement = value;
  }

  /**
   * Creates a new Triangle RecordBuilder.
   * @return A new Triangle RecordBuilder
   */
  public static com.xplordat.rtmonitoring.avro.Triangle.Builder newBuilder() {
    return new com.xplordat.rtmonitoring.avro.Triangle.Builder();
  }

  /**
   * Creates a new Triangle RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Triangle RecordBuilder
   */
  public static com.xplordat.rtmonitoring.avro.Triangle.Builder newBuilder(com.xplordat.rtmonitoring.avro.Triangle.Builder other) {
    return new com.xplordat.rtmonitoring.avro.Triangle.Builder(other);
  }

  /**
   * Creates a new Triangle RecordBuilder by copying an existing Triangle instance.
   * @param other The existing instance to copy.
   * @return A new Triangle RecordBuilder
   */
  public static com.xplordat.rtmonitoring.avro.Triangle.Builder newBuilder(com.xplordat.rtmonitoring.avro.Triangle other) {
    return new com.xplordat.rtmonitoring.avro.Triangle.Builder(other);
  }

  /**
   * RecordBuilder for Triangle instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Triangle>
    implements org.apache.avro.data.RecordBuilder<Triangle> {

    private long timeStart;
    private long timeInstant;
    private long timeEnd;
    private int numberOfAMeasurements;
    private int numberOfBMeasurements;
    private int numberOfCMeasurements;
    private double xA;
    private double yA;
    private double xB;
    private double yB;
    private double xC;
    private double yC;
    private double AB;
    private double BC;
    private double AC;
    private double perimeter;
    private double area;
    private double totalDisplacement;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.xplordat.rtmonitoring.avro.Triangle.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.timeStart)) {
        this.timeStart = data().deepCopy(fields()[0].schema(), other.timeStart);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.timeInstant)) {
        this.timeInstant = data().deepCopy(fields()[1].schema(), other.timeInstant);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.timeEnd)) {
        this.timeEnd = data().deepCopy(fields()[2].schema(), other.timeEnd);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.numberOfAMeasurements)) {
        this.numberOfAMeasurements = data().deepCopy(fields()[3].schema(), other.numberOfAMeasurements);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.numberOfBMeasurements)) {
        this.numberOfBMeasurements = data().deepCopy(fields()[4].schema(), other.numberOfBMeasurements);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.numberOfCMeasurements)) {
        this.numberOfCMeasurements = data().deepCopy(fields()[5].schema(), other.numberOfCMeasurements);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.xA)) {
        this.xA = data().deepCopy(fields()[6].schema(), other.xA);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.yA)) {
        this.yA = data().deepCopy(fields()[7].schema(), other.yA);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.xB)) {
        this.xB = data().deepCopy(fields()[8].schema(), other.xB);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.yB)) {
        this.yB = data().deepCopy(fields()[9].schema(), other.yB);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.xC)) {
        this.xC = data().deepCopy(fields()[10].schema(), other.xC);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.yC)) {
        this.yC = data().deepCopy(fields()[11].schema(), other.yC);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.AB)) {
        this.AB = data().deepCopy(fields()[12].schema(), other.AB);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.BC)) {
        this.BC = data().deepCopy(fields()[13].schema(), other.BC);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.AC)) {
        this.AC = data().deepCopy(fields()[14].schema(), other.AC);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.perimeter)) {
        this.perimeter = data().deepCopy(fields()[15].schema(), other.perimeter);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.area)) {
        this.area = data().deepCopy(fields()[16].schema(), other.area);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.totalDisplacement)) {
        this.totalDisplacement = data().deepCopy(fields()[17].schema(), other.totalDisplacement);
        fieldSetFlags()[17] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Triangle instance
     * @param other The existing instance to copy.
     */
    private Builder(com.xplordat.rtmonitoring.avro.Triangle other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.timeStart)) {
        this.timeStart = data().deepCopy(fields()[0].schema(), other.timeStart);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.timeInstant)) {
        this.timeInstant = data().deepCopy(fields()[1].schema(), other.timeInstant);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.timeEnd)) {
        this.timeEnd = data().deepCopy(fields()[2].schema(), other.timeEnd);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.numberOfAMeasurements)) {
        this.numberOfAMeasurements = data().deepCopy(fields()[3].schema(), other.numberOfAMeasurements);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.numberOfBMeasurements)) {
        this.numberOfBMeasurements = data().deepCopy(fields()[4].schema(), other.numberOfBMeasurements);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.numberOfCMeasurements)) {
        this.numberOfCMeasurements = data().deepCopy(fields()[5].schema(), other.numberOfCMeasurements);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.xA)) {
        this.xA = data().deepCopy(fields()[6].schema(), other.xA);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.yA)) {
        this.yA = data().deepCopy(fields()[7].schema(), other.yA);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.xB)) {
        this.xB = data().deepCopy(fields()[8].schema(), other.xB);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.yB)) {
        this.yB = data().deepCopy(fields()[9].schema(), other.yB);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.xC)) {
        this.xC = data().deepCopy(fields()[10].schema(), other.xC);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.yC)) {
        this.yC = data().deepCopy(fields()[11].schema(), other.yC);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.AB)) {
        this.AB = data().deepCopy(fields()[12].schema(), other.AB);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.BC)) {
        this.BC = data().deepCopy(fields()[13].schema(), other.BC);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.AC)) {
        this.AC = data().deepCopy(fields()[14].schema(), other.AC);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.perimeter)) {
        this.perimeter = data().deepCopy(fields()[15].schema(), other.perimeter);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.area)) {
        this.area = data().deepCopy(fields()[16].schema(), other.area);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.totalDisplacement)) {
        this.totalDisplacement = data().deepCopy(fields()[17].schema(), other.totalDisplacement);
        fieldSetFlags()[17] = true;
      }
    }

    /**
      * Gets the value of the 'timeStart' field.
      * @return The value.
      */
    public java.lang.Long getTimeStart() {
      return timeStart;
    }

    /**
      * Sets the value of the 'timeStart' field.
      * @param value The value of 'timeStart'.
      * @return This builder.
      */
    public com.xplordat.rtmonitoring.avro.Triangle.Builder setTimeStart(long value) {
      validate(fields()[0], value);
      this.timeStart = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'timeStart' field has been set.
      * @return True if the 'timeStart' field has been set, false otherwise.
      */
    public boolean hasTimeStart() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'timeStart' field.
      * @return This builder.
      */
    public com.xplordat.rtmonitoring.avro.Triangle.Builder clearTimeStart() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'timeInstant' field.
      * @return The value.
      */
    public java.lang.Long getTimeInstant() {
      return timeInstant;
    }

    /**
      * Sets the value of the 'timeInstant' field.
      * @param value The value of 'timeInstant'.
      * @return This builder.
      */
    public com.xplordat.rtmonitoring.avro.Triangle.Builder setTimeInstant(long value) {
      validate(fields()[1], value);
      this.timeInstant = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'timeInstant' field has been set.
      * @return True if the 'timeInstant' field has been set, false otherwise.
      */
    public boolean hasTimeInstant() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'timeInstant' field.
      * @return This builder.
      */
    public com.xplordat.rtmonitoring.avro.Triangle.Builder clearTimeInstant() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'timeEnd' field.
      * @return The value.
      */
    public java.lang.Long getTimeEnd() {
      return timeEnd;
    }

    /**
      * Sets the value of the 'timeEnd' field.
      * @param value The value of 'timeEnd'.
      * @return This builder.
      */
    public com.xplordat.rtmonitoring.avro.Triangle.Builder setTimeEnd(long value) {
      validate(fields()[2], value);
      this.timeEnd = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'timeEnd' field has been set.
      * @return True if the 'timeEnd' field has been set, false otherwise.
      */
    public boolean hasTimeEnd() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'timeEnd' field.
      * @return This builder.
      */
    public com.xplordat.rtmonitoring.avro.Triangle.Builder clearTimeEnd() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'numberOfAMeasurements' field.
      * @return The value.
      */
    public java.lang.Integer getNumberOfAMeasurements() {
      return numberOfAMeasurements;
    }

    /**
      * Sets the value of the 'numberOfAMeasurements' field.
      * @param value The value of 'numberOfAMeasurements'.
      * @return This builder.
      */
    public com.xplordat.rtmonitoring.avro.Triangle.Builder setNumberOfAMeasurements(int value) {
      validate(fields()[3], value);
      this.numberOfAMeasurements = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'numberOfAMeasurements' field has been set.
      * @return True if the 'numberOfAMeasurements' field has been set, false otherwise.
      */
    public boolean hasNumberOfAMeasurements() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'numberOfAMeasurements' field.
      * @return This builder.
      */
    public com.xplordat.rtmonitoring.avro.Triangle.Builder clearNumberOfAMeasurements() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'numberOfBMeasurements' field.
      * @return The value.
      */
    public java.lang.Integer getNumberOfBMeasurements() {
      return numberOfBMeasurements;
    }

    /**
      * Sets the value of the 'numberOfBMeasurements' field.
      * @param value The value of 'numberOfBMeasurements'.
      * @return This builder.
      */
    public com.xplordat.rtmonitoring.avro.Triangle.Builder setNumberOfBMeasurements(int value) {
      validate(fields()[4], value);
      this.numberOfBMeasurements = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'numberOfBMeasurements' field has been set.
      * @return True if the 'numberOfBMeasurements' field has been set, false otherwise.
      */
    public boolean hasNumberOfBMeasurements() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'numberOfBMeasurements' field.
      * @return This builder.
      */
    public com.xplordat.rtmonitoring.avro.Triangle.Builder clearNumberOfBMeasurements() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'numberOfCMeasurements' field.
      * @return The value.
      */
    public java.lang.Integer getNumberOfCMeasurements() {
      return numberOfCMeasurements;
    }

    /**
      * Sets the value of the 'numberOfCMeasurements' field.
      * @param value The value of 'numberOfCMeasurements'.
      * @return This builder.
      */
    public com.xplordat.rtmonitoring.avro.Triangle.Builder setNumberOfCMeasurements(int value) {
      validate(fields()[5], value);
      this.numberOfCMeasurements = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'numberOfCMeasurements' field has been set.
      * @return True if the 'numberOfCMeasurements' field has been set, false otherwise.
      */
    public boolean hasNumberOfCMeasurements() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'numberOfCMeasurements' field.
      * @return This builder.
      */
    public com.xplordat.rtmonitoring.avro.Triangle.Builder clearNumberOfCMeasurements() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'xA' field.
      * @return The value.
      */
    public java.lang.Double getXA() {
      return xA;
    }

    /**
      * Sets the value of the 'xA' field.
      * @param value The value of 'xA'.
      * @return This builder.
      */
    public com.xplordat.rtmonitoring.avro.Triangle.Builder setXA(double value) {
      validate(fields()[6], value);
      this.xA = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'xA' field has been set.
      * @return True if the 'xA' field has been set, false otherwise.
      */
    public boolean hasXA() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'xA' field.
      * @return This builder.
      */
    public com.xplordat.rtmonitoring.avro.Triangle.Builder clearXA() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'yA' field.
      * @return The value.
      */
    public java.lang.Double getYA() {
      return yA;
    }

    /**
      * Sets the value of the 'yA' field.
      * @param value The value of 'yA'.
      * @return This builder.
      */
    public com.xplordat.rtmonitoring.avro.Triangle.Builder setYA(double value) {
      validate(fields()[7], value);
      this.yA = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'yA' field has been set.
      * @return True if the 'yA' field has been set, false otherwise.
      */
    public boolean hasYA() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'yA' field.
      * @return This builder.
      */
    public com.xplordat.rtmonitoring.avro.Triangle.Builder clearYA() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'xB' field.
      * @return The value.
      */
    public java.lang.Double getXB() {
      return xB;
    }

    /**
      * Sets the value of the 'xB' field.
      * @param value The value of 'xB'.
      * @return This builder.
      */
    public com.xplordat.rtmonitoring.avro.Triangle.Builder setXB(double value) {
      validate(fields()[8], value);
      this.xB = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'xB' field has been set.
      * @return True if the 'xB' field has been set, false otherwise.
      */
    public boolean hasXB() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'xB' field.
      * @return This builder.
      */
    public com.xplordat.rtmonitoring.avro.Triangle.Builder clearXB() {
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'yB' field.
      * @return The value.
      */
    public java.lang.Double getYB() {
      return yB;
    }

    /**
      * Sets the value of the 'yB' field.
      * @param value The value of 'yB'.
      * @return This builder.
      */
    public com.xplordat.rtmonitoring.avro.Triangle.Builder setYB(double value) {
      validate(fields()[9], value);
      this.yB = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'yB' field has been set.
      * @return True if the 'yB' field has been set, false otherwise.
      */
    public boolean hasYB() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'yB' field.
      * @return This builder.
      */
    public com.xplordat.rtmonitoring.avro.Triangle.Builder clearYB() {
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'xC' field.
      * @return The value.
      */
    public java.lang.Double getXC() {
      return xC;
    }

    /**
      * Sets the value of the 'xC' field.
      * @param value The value of 'xC'.
      * @return This builder.
      */
    public com.xplordat.rtmonitoring.avro.Triangle.Builder setXC(double value) {
      validate(fields()[10], value);
      this.xC = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'xC' field has been set.
      * @return True if the 'xC' field has been set, false otherwise.
      */
    public boolean hasXC() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'xC' field.
      * @return This builder.
      */
    public com.xplordat.rtmonitoring.avro.Triangle.Builder clearXC() {
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'yC' field.
      * @return The value.
      */
    public java.lang.Double getYC() {
      return yC;
    }

    /**
      * Sets the value of the 'yC' field.
      * @param value The value of 'yC'.
      * @return This builder.
      */
    public com.xplordat.rtmonitoring.avro.Triangle.Builder setYC(double value) {
      validate(fields()[11], value);
      this.yC = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'yC' field has been set.
      * @return True if the 'yC' field has been set, false otherwise.
      */
    public boolean hasYC() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'yC' field.
      * @return This builder.
      */
    public com.xplordat.rtmonitoring.avro.Triangle.Builder clearYC() {
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'AB' field.
      * @return The value.
      */
    public java.lang.Double getAB() {
      return AB;
    }

    /**
      * Sets the value of the 'AB' field.
      * @param value The value of 'AB'.
      * @return This builder.
      */
    public com.xplordat.rtmonitoring.avro.Triangle.Builder setAB(double value) {
      validate(fields()[12], value);
      this.AB = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'AB' field has been set.
      * @return True if the 'AB' field has been set, false otherwise.
      */
    public boolean hasAB() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'AB' field.
      * @return This builder.
      */
    public com.xplordat.rtmonitoring.avro.Triangle.Builder clearAB() {
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'BC' field.
      * @return The value.
      */
    public java.lang.Double getBC() {
      return BC;
    }

    /**
      * Sets the value of the 'BC' field.
      * @param value The value of 'BC'.
      * @return This builder.
      */
    public com.xplordat.rtmonitoring.avro.Triangle.Builder setBC(double value) {
      validate(fields()[13], value);
      this.BC = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'BC' field has been set.
      * @return True if the 'BC' field has been set, false otherwise.
      */
    public boolean hasBC() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'BC' field.
      * @return This builder.
      */
    public com.xplordat.rtmonitoring.avro.Triangle.Builder clearBC() {
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'AC' field.
      * @return The value.
      */
    public java.lang.Double getAC() {
      return AC;
    }

    /**
      * Sets the value of the 'AC' field.
      * @param value The value of 'AC'.
      * @return This builder.
      */
    public com.xplordat.rtmonitoring.avro.Triangle.Builder setAC(double value) {
      validate(fields()[14], value);
      this.AC = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'AC' field has been set.
      * @return True if the 'AC' field has been set, false otherwise.
      */
    public boolean hasAC() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'AC' field.
      * @return This builder.
      */
    public com.xplordat.rtmonitoring.avro.Triangle.Builder clearAC() {
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'perimeter' field.
      * @return The value.
      */
    public java.lang.Double getPerimeter() {
      return perimeter;
    }

    /**
      * Sets the value of the 'perimeter' field.
      * @param value The value of 'perimeter'.
      * @return This builder.
      */
    public com.xplordat.rtmonitoring.avro.Triangle.Builder setPerimeter(double value) {
      validate(fields()[15], value);
      this.perimeter = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'perimeter' field has been set.
      * @return True if the 'perimeter' field has been set, false otherwise.
      */
    public boolean hasPerimeter() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'perimeter' field.
      * @return This builder.
      */
    public com.xplordat.rtmonitoring.avro.Triangle.Builder clearPerimeter() {
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'area' field.
      * @return The value.
      */
    public java.lang.Double getArea() {
      return area;
    }

    /**
      * Sets the value of the 'area' field.
      * @param value The value of 'area'.
      * @return This builder.
      */
    public com.xplordat.rtmonitoring.avro.Triangle.Builder setArea(double value) {
      validate(fields()[16], value);
      this.area = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'area' field has been set.
      * @return True if the 'area' field has been set, false otherwise.
      */
    public boolean hasArea() {
      return fieldSetFlags()[16];
    }


    /**
      * Clears the value of the 'area' field.
      * @return This builder.
      */
    public com.xplordat.rtmonitoring.avro.Triangle.Builder clearArea() {
      fieldSetFlags()[16] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalDisplacement' field.
      * @return The value.
      */
    public java.lang.Double getTotalDisplacement() {
      return totalDisplacement;
    }

    /**
      * Sets the value of the 'totalDisplacement' field.
      * @param value The value of 'totalDisplacement'.
      * @return This builder.
      */
    public com.xplordat.rtmonitoring.avro.Triangle.Builder setTotalDisplacement(double value) {
      validate(fields()[17], value);
      this.totalDisplacement = value;
      fieldSetFlags()[17] = true;
      return this;
    }

    /**
      * Checks whether the 'totalDisplacement' field has been set.
      * @return True if the 'totalDisplacement' field has been set, false otherwise.
      */
    public boolean hasTotalDisplacement() {
      return fieldSetFlags()[17];
    }


    /**
      * Clears the value of the 'totalDisplacement' field.
      * @return This builder.
      */
    public com.xplordat.rtmonitoring.avro.Triangle.Builder clearTotalDisplacement() {
      fieldSetFlags()[17] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Triangle build() {
      try {
        Triangle record = new Triangle();
        record.timeStart = fieldSetFlags()[0] ? this.timeStart : (java.lang.Long) defaultValue(fields()[0]);
        record.timeInstant = fieldSetFlags()[1] ? this.timeInstant : (java.lang.Long) defaultValue(fields()[1]);
        record.timeEnd = fieldSetFlags()[2] ? this.timeEnd : (java.lang.Long) defaultValue(fields()[2]);
        record.numberOfAMeasurements = fieldSetFlags()[3] ? this.numberOfAMeasurements : (java.lang.Integer) defaultValue(fields()[3]);
        record.numberOfBMeasurements = fieldSetFlags()[4] ? this.numberOfBMeasurements : (java.lang.Integer) defaultValue(fields()[4]);
        record.numberOfCMeasurements = fieldSetFlags()[5] ? this.numberOfCMeasurements : (java.lang.Integer) defaultValue(fields()[5]);
        record.xA = fieldSetFlags()[6] ? this.xA : (java.lang.Double) defaultValue(fields()[6]);
        record.yA = fieldSetFlags()[7] ? this.yA : (java.lang.Double) defaultValue(fields()[7]);
        record.xB = fieldSetFlags()[8] ? this.xB : (java.lang.Double) defaultValue(fields()[8]);
        record.yB = fieldSetFlags()[9] ? this.yB : (java.lang.Double) defaultValue(fields()[9]);
        record.xC = fieldSetFlags()[10] ? this.xC : (java.lang.Double) defaultValue(fields()[10]);
        record.yC = fieldSetFlags()[11] ? this.yC : (java.lang.Double) defaultValue(fields()[11]);
        record.AB = fieldSetFlags()[12] ? this.AB : (java.lang.Double) defaultValue(fields()[12]);
        record.BC = fieldSetFlags()[13] ? this.BC : (java.lang.Double) defaultValue(fields()[13]);
        record.AC = fieldSetFlags()[14] ? this.AC : (java.lang.Double) defaultValue(fields()[14]);
        record.perimeter = fieldSetFlags()[15] ? this.perimeter : (java.lang.Double) defaultValue(fields()[15]);
        record.area = fieldSetFlags()[16] ? this.area : (java.lang.Double) defaultValue(fields()[16]);
        record.totalDisplacement = fieldSetFlags()[17] ? this.totalDisplacement : (java.lang.Double) defaultValue(fields()[17]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Triangle>
    WRITER$ = (org.apache.avro.io.DatumWriter<Triangle>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Triangle>
    READER$ = (org.apache.avro.io.DatumReader<Triangle>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
