/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.xplordat.rtmonitoring.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class RawVertex extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 2870864440919065583L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"RawVertex\",\"namespace\":\"com.xplordat.rtmonitoring.avro\",\"fields\":[{\"name\":\"sensor\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"timeInstant\",\"type\":\"long\"},{\"name\":\"X\",\"type\":\"double\"},{\"name\":\"Y\",\"type\":\"double\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<RawVertex> ENCODER =
      new BinaryMessageEncoder<RawVertex>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<RawVertex> DECODER =
      new BinaryMessageDecoder<RawVertex>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<RawVertex> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<RawVertex> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<RawVertex>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this RawVertex to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a RawVertex from a ByteBuffer. */
  public static RawVertex fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.String sensor;
  @Deprecated public long timeInstant;
  @Deprecated public double X;
  @Deprecated public double Y;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public RawVertex() {}

  /**
   * All-args constructor.
   * @param sensor The new value for sensor
   * @param timeInstant The new value for timeInstant
   * @param X The new value for X
   * @param Y The new value for Y
   */
  public RawVertex(java.lang.String sensor, java.lang.Long timeInstant, java.lang.Double X, java.lang.Double Y) {
    this.sensor = sensor;
    this.timeInstant = timeInstant;
    this.X = X;
    this.Y = Y;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return sensor;
    case 1: return timeInstant;
    case 2: return X;
    case 3: return Y;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: sensor = (java.lang.String)value$; break;
    case 1: timeInstant = (java.lang.Long)value$; break;
    case 2: X = (java.lang.Double)value$; break;
    case 3: Y = (java.lang.Double)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'sensor' field.
   * @return The value of the 'sensor' field.
   */
  public java.lang.String getSensor() {
    return sensor;
  }

  /**
   * Sets the value of the 'sensor' field.
   * @param value the value to set.
   */
  public void setSensor(java.lang.String value) {
    this.sensor = value;
  }

  /**
   * Gets the value of the 'timeInstant' field.
   * @return The value of the 'timeInstant' field.
   */
  public java.lang.Long getTimeInstant() {
    return timeInstant;
  }

  /**
   * Sets the value of the 'timeInstant' field.
   * @param value the value to set.
   */
  public void setTimeInstant(java.lang.Long value) {
    this.timeInstant = value;
  }

  /**
   * Gets the value of the 'X' field.
   * @return The value of the 'X' field.
   */
  public java.lang.Double getX() {
    return X;
  }

  /**
   * Sets the value of the 'X' field.
   * @param value the value to set.
   */
  public void setX(java.lang.Double value) {
    this.X = value;
  }

  /**
   * Gets the value of the 'Y' field.
   * @return The value of the 'Y' field.
   */
  public java.lang.Double getY() {
    return Y;
  }

  /**
   * Sets the value of the 'Y' field.
   * @param value the value to set.
   */
  public void setY(java.lang.Double value) {
    this.Y = value;
  }

  /**
   * Creates a new RawVertex RecordBuilder.
   * @return A new RawVertex RecordBuilder
   */
  public static com.xplordat.rtmonitoring.avro.RawVertex.Builder newBuilder() {
    return new com.xplordat.rtmonitoring.avro.RawVertex.Builder();
  }

  /**
   * Creates a new RawVertex RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new RawVertex RecordBuilder
   */
  public static com.xplordat.rtmonitoring.avro.RawVertex.Builder newBuilder(com.xplordat.rtmonitoring.avro.RawVertex.Builder other) {
    return new com.xplordat.rtmonitoring.avro.RawVertex.Builder(other);
  }

  /**
   * Creates a new RawVertex RecordBuilder by copying an existing RawVertex instance.
   * @param other The existing instance to copy.
   * @return A new RawVertex RecordBuilder
   */
  public static com.xplordat.rtmonitoring.avro.RawVertex.Builder newBuilder(com.xplordat.rtmonitoring.avro.RawVertex other) {
    return new com.xplordat.rtmonitoring.avro.RawVertex.Builder(other);
  }

  /**
   * RecordBuilder for RawVertex instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<RawVertex>
    implements org.apache.avro.data.RecordBuilder<RawVertex> {

    private java.lang.String sensor;
    private long timeInstant;
    private double X;
    private double Y;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.xplordat.rtmonitoring.avro.RawVertex.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.sensor)) {
        this.sensor = data().deepCopy(fields()[0].schema(), other.sensor);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.timeInstant)) {
        this.timeInstant = data().deepCopy(fields()[1].schema(), other.timeInstant);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.X)) {
        this.X = data().deepCopy(fields()[2].schema(), other.X);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.Y)) {
        this.Y = data().deepCopy(fields()[3].schema(), other.Y);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing RawVertex instance
     * @param other The existing instance to copy.
     */
    private Builder(com.xplordat.rtmonitoring.avro.RawVertex other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.sensor)) {
        this.sensor = data().deepCopy(fields()[0].schema(), other.sensor);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.timeInstant)) {
        this.timeInstant = data().deepCopy(fields()[1].schema(), other.timeInstant);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.X)) {
        this.X = data().deepCopy(fields()[2].schema(), other.X);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.Y)) {
        this.Y = data().deepCopy(fields()[3].schema(), other.Y);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'sensor' field.
      * @return The value.
      */
    public java.lang.String getSensor() {
      return sensor;
    }

    /**
      * Sets the value of the 'sensor' field.
      * @param value The value of 'sensor'.
      * @return This builder.
      */
    public com.xplordat.rtmonitoring.avro.RawVertex.Builder setSensor(java.lang.String value) {
      validate(fields()[0], value);
      this.sensor = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'sensor' field has been set.
      * @return True if the 'sensor' field has been set, false otherwise.
      */
    public boolean hasSensor() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'sensor' field.
      * @return This builder.
      */
    public com.xplordat.rtmonitoring.avro.RawVertex.Builder clearSensor() {
      sensor = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'timeInstant' field.
      * @return The value.
      */
    public java.lang.Long getTimeInstant() {
      return timeInstant;
    }

    /**
      * Sets the value of the 'timeInstant' field.
      * @param value The value of 'timeInstant'.
      * @return This builder.
      */
    public com.xplordat.rtmonitoring.avro.RawVertex.Builder setTimeInstant(long value) {
      validate(fields()[1], value);
      this.timeInstant = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'timeInstant' field has been set.
      * @return True if the 'timeInstant' field has been set, false otherwise.
      */
    public boolean hasTimeInstant() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'timeInstant' field.
      * @return This builder.
      */
    public com.xplordat.rtmonitoring.avro.RawVertex.Builder clearTimeInstant() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'X' field.
      * @return The value.
      */
    public java.lang.Double getX() {
      return X;
    }

    /**
      * Sets the value of the 'X' field.
      * @param value The value of 'X'.
      * @return This builder.
      */
    public com.xplordat.rtmonitoring.avro.RawVertex.Builder setX(double value) {
      validate(fields()[2], value);
      this.X = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'X' field has been set.
      * @return True if the 'X' field has been set, false otherwise.
      */
    public boolean hasX() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'X' field.
      * @return This builder.
      */
    public com.xplordat.rtmonitoring.avro.RawVertex.Builder clearX() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'Y' field.
      * @return The value.
      */
    public java.lang.Double getY() {
      return Y;
    }

    /**
      * Sets the value of the 'Y' field.
      * @param value The value of 'Y'.
      * @return This builder.
      */
    public com.xplordat.rtmonitoring.avro.RawVertex.Builder setY(double value) {
      validate(fields()[3], value);
      this.Y = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'Y' field has been set.
      * @return True if the 'Y' field has been set, false otherwise.
      */
    public boolean hasY() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'Y' field.
      * @return This builder.
      */
    public com.xplordat.rtmonitoring.avro.RawVertex.Builder clearY() {
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public RawVertex build() {
      try {
        RawVertex record = new RawVertex();
        record.sensor = fieldSetFlags()[0] ? this.sensor : (java.lang.String) defaultValue(fields()[0]);
        record.timeInstant = fieldSetFlags()[1] ? this.timeInstant : (java.lang.Long) defaultValue(fields()[1]);
        record.X = fieldSetFlags()[2] ? this.X : (java.lang.Double) defaultValue(fields()[2]);
        record.Y = fieldSetFlags()[3] ? this.Y : (java.lang.Double) defaultValue(fields()[3]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<RawVertex>
    WRITER$ = (org.apache.avro.io.DatumWriter<RawVertex>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<RawVertex>
    READER$ = (org.apache.avro.io.DatumReader<RawVertex>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
