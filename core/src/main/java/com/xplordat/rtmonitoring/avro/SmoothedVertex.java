/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.xplordat.rtmonitoring.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class SmoothedVertex extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -273108098811807887L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SmoothedVertex\",\"namespace\":\"com.xplordat.rtmonitoring.avro\",\"fields\":[{\"name\":\"sensor\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"timeStart\",\"type\":\"long\"},{\"name\":\"timeInstant\",\"type\":\"long\"},{\"name\":\"timeEnd\",\"type\":\"long\"},{\"name\":\"X\",\"type\":\"double\"},{\"name\":\"Y\",\"type\":\"double\"},{\"name\":\"numberOfSamplesIntheAverage\",\"type\":\"long\"},{\"name\":\"cumulativeDisplacementForThisSensor\",\"type\":\"double\"},{\"name\":\"pushCount\",\"type\":\"long\"},{\"name\":\"pushTime\",\"type\":\"long\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<SmoothedVertex> ENCODER =
      new BinaryMessageEncoder<SmoothedVertex>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<SmoothedVertex> DECODER =
      new BinaryMessageDecoder<SmoothedVertex>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<SmoothedVertex> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<SmoothedVertex> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<SmoothedVertex>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this SmoothedVertex to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a SmoothedVertex from a ByteBuffer. */
  public static SmoothedVertex fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.String sensor;
  @Deprecated public long timeStart;
  @Deprecated public long timeInstant;
  @Deprecated public long timeEnd;
  @Deprecated public double X;
  @Deprecated public double Y;
  @Deprecated public long numberOfSamplesIntheAverage;
  @Deprecated public double cumulativeDisplacementForThisSensor;
  @Deprecated public long pushCount;
  @Deprecated public long pushTime;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public SmoothedVertex() {}

  /**
   * All-args constructor.
   * @param sensor The new value for sensor
   * @param timeStart The new value for timeStart
   * @param timeInstant The new value for timeInstant
   * @param timeEnd The new value for timeEnd
   * @param X The new value for X
   * @param Y The new value for Y
   * @param numberOfSamplesIntheAverage The new value for numberOfSamplesIntheAverage
   * @param cumulativeDisplacementForThisSensor The new value for cumulativeDisplacementForThisSensor
   * @param pushCount The new value for pushCount
   * @param pushTime The new value for pushTime
   */
  public SmoothedVertex(java.lang.String sensor, java.lang.Long timeStart, java.lang.Long timeInstant, java.lang.Long timeEnd, java.lang.Double X, java.lang.Double Y, java.lang.Long numberOfSamplesIntheAverage, java.lang.Double cumulativeDisplacementForThisSensor, java.lang.Long pushCount, java.lang.Long pushTime) {
    this.sensor = sensor;
    this.timeStart = timeStart;
    this.timeInstant = timeInstant;
    this.timeEnd = timeEnd;
    this.X = X;
    this.Y = Y;
    this.numberOfSamplesIntheAverage = numberOfSamplesIntheAverage;
    this.cumulativeDisplacementForThisSensor = cumulativeDisplacementForThisSensor;
    this.pushCount = pushCount;
    this.pushTime = pushTime;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return sensor;
    case 1: return timeStart;
    case 2: return timeInstant;
    case 3: return timeEnd;
    case 4: return X;
    case 5: return Y;
    case 6: return numberOfSamplesIntheAverage;
    case 7: return cumulativeDisplacementForThisSensor;
    case 8: return pushCount;
    case 9: return pushTime;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: sensor = (java.lang.String)value$; break;
    case 1: timeStart = (java.lang.Long)value$; break;
    case 2: timeInstant = (java.lang.Long)value$; break;
    case 3: timeEnd = (java.lang.Long)value$; break;
    case 4: X = (java.lang.Double)value$; break;
    case 5: Y = (java.lang.Double)value$; break;
    case 6: numberOfSamplesIntheAverage = (java.lang.Long)value$; break;
    case 7: cumulativeDisplacementForThisSensor = (java.lang.Double)value$; break;
    case 8: pushCount = (java.lang.Long)value$; break;
    case 9: pushTime = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'sensor' field.
   * @return The value of the 'sensor' field.
   */
  public java.lang.String getSensor() {
    return sensor;
  }

  /**
   * Sets the value of the 'sensor' field.
   * @param value the value to set.
   */
  public void setSensor(java.lang.String value) {
    this.sensor = value;
  }

  /**
   * Gets the value of the 'timeStart' field.
   * @return The value of the 'timeStart' field.
   */
  public java.lang.Long getTimeStart() {
    return timeStart;
  }

  /**
   * Sets the value of the 'timeStart' field.
   * @param value the value to set.
   */
  public void setTimeStart(java.lang.Long value) {
    this.timeStart = value;
  }

  /**
   * Gets the value of the 'timeInstant' field.
   * @return The value of the 'timeInstant' field.
   */
  public java.lang.Long getTimeInstant() {
    return timeInstant;
  }

  /**
   * Sets the value of the 'timeInstant' field.
   * @param value the value to set.
   */
  public void setTimeInstant(java.lang.Long value) {
    this.timeInstant = value;
  }

  /**
   * Gets the value of the 'timeEnd' field.
   * @return The value of the 'timeEnd' field.
   */
  public java.lang.Long getTimeEnd() {
    return timeEnd;
  }

  /**
   * Sets the value of the 'timeEnd' field.
   * @param value the value to set.
   */
  public void setTimeEnd(java.lang.Long value) {
    this.timeEnd = value;
  }

  /**
   * Gets the value of the 'X' field.
   * @return The value of the 'X' field.
   */
  public java.lang.Double getX() {
    return X;
  }

  /**
   * Sets the value of the 'X' field.
   * @param value the value to set.
   */
  public void setX(java.lang.Double value) {
    this.X = value;
  }

  /**
   * Gets the value of the 'Y' field.
   * @return The value of the 'Y' field.
   */
  public java.lang.Double getY() {
    return Y;
  }

  /**
   * Sets the value of the 'Y' field.
   * @param value the value to set.
   */
  public void setY(java.lang.Double value) {
    this.Y = value;
  }

  /**
   * Gets the value of the 'numberOfSamplesIntheAverage' field.
   * @return The value of the 'numberOfSamplesIntheAverage' field.
   */
  public java.lang.Long getNumberOfSamplesIntheAverage() {
    return numberOfSamplesIntheAverage;
  }

  /**
   * Sets the value of the 'numberOfSamplesIntheAverage' field.
   * @param value the value to set.
   */
  public void setNumberOfSamplesIntheAverage(java.lang.Long value) {
    this.numberOfSamplesIntheAverage = value;
  }

  /**
   * Gets the value of the 'cumulativeDisplacementForThisSensor' field.
   * @return The value of the 'cumulativeDisplacementForThisSensor' field.
   */
  public java.lang.Double getCumulativeDisplacementForThisSensor() {
    return cumulativeDisplacementForThisSensor;
  }

  /**
   * Sets the value of the 'cumulativeDisplacementForThisSensor' field.
   * @param value the value to set.
   */
  public void setCumulativeDisplacementForThisSensor(java.lang.Double value) {
    this.cumulativeDisplacementForThisSensor = value;
  }

  /**
   * Gets the value of the 'pushCount' field.
   * @return The value of the 'pushCount' field.
   */
  public java.lang.Long getPushCount() {
    return pushCount;
  }

  /**
   * Sets the value of the 'pushCount' field.
   * @param value the value to set.
   */
  public void setPushCount(java.lang.Long value) {
    this.pushCount = value;
  }

  /**
   * Gets the value of the 'pushTime' field.
   * @return The value of the 'pushTime' field.
   */
  public java.lang.Long getPushTime() {
    return pushTime;
  }

  /**
   * Sets the value of the 'pushTime' field.
   * @param value the value to set.
   */
  public void setPushTime(java.lang.Long value) {
    this.pushTime = value;
  }

  /**
   * Creates a new SmoothedVertex RecordBuilder.
   * @return A new SmoothedVertex RecordBuilder
   */
  public static com.xplordat.rtmonitoring.avro.SmoothedVertex.Builder newBuilder() {
    return new com.xplordat.rtmonitoring.avro.SmoothedVertex.Builder();
  }

  /**
   * Creates a new SmoothedVertex RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new SmoothedVertex RecordBuilder
   */
  public static com.xplordat.rtmonitoring.avro.SmoothedVertex.Builder newBuilder(com.xplordat.rtmonitoring.avro.SmoothedVertex.Builder other) {
    return new com.xplordat.rtmonitoring.avro.SmoothedVertex.Builder(other);
  }

  /**
   * Creates a new SmoothedVertex RecordBuilder by copying an existing SmoothedVertex instance.
   * @param other The existing instance to copy.
   * @return A new SmoothedVertex RecordBuilder
   */
  public static com.xplordat.rtmonitoring.avro.SmoothedVertex.Builder newBuilder(com.xplordat.rtmonitoring.avro.SmoothedVertex other) {
    return new com.xplordat.rtmonitoring.avro.SmoothedVertex.Builder(other);
  }

  /**
   * RecordBuilder for SmoothedVertex instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SmoothedVertex>
    implements org.apache.avro.data.RecordBuilder<SmoothedVertex> {

    private java.lang.String sensor;
    private long timeStart;
    private long timeInstant;
    private long timeEnd;
    private double X;
    private double Y;
    private long numberOfSamplesIntheAverage;
    private double cumulativeDisplacementForThisSensor;
    private long pushCount;
    private long pushTime;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.xplordat.rtmonitoring.avro.SmoothedVertex.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.sensor)) {
        this.sensor = data().deepCopy(fields()[0].schema(), other.sensor);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.timeStart)) {
        this.timeStart = data().deepCopy(fields()[1].schema(), other.timeStart);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.timeInstant)) {
        this.timeInstant = data().deepCopy(fields()[2].schema(), other.timeInstant);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.timeEnd)) {
        this.timeEnd = data().deepCopy(fields()[3].schema(), other.timeEnd);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.X)) {
        this.X = data().deepCopy(fields()[4].schema(), other.X);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.Y)) {
        this.Y = data().deepCopy(fields()[5].schema(), other.Y);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.numberOfSamplesIntheAverage)) {
        this.numberOfSamplesIntheAverage = data().deepCopy(fields()[6].schema(), other.numberOfSamplesIntheAverage);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.cumulativeDisplacementForThisSensor)) {
        this.cumulativeDisplacementForThisSensor = data().deepCopy(fields()[7].schema(), other.cumulativeDisplacementForThisSensor);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.pushCount)) {
        this.pushCount = data().deepCopy(fields()[8].schema(), other.pushCount);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.pushTime)) {
        this.pushTime = data().deepCopy(fields()[9].schema(), other.pushTime);
        fieldSetFlags()[9] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing SmoothedVertex instance
     * @param other The existing instance to copy.
     */
    private Builder(com.xplordat.rtmonitoring.avro.SmoothedVertex other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.sensor)) {
        this.sensor = data().deepCopy(fields()[0].schema(), other.sensor);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.timeStart)) {
        this.timeStart = data().deepCopy(fields()[1].schema(), other.timeStart);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.timeInstant)) {
        this.timeInstant = data().deepCopy(fields()[2].schema(), other.timeInstant);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.timeEnd)) {
        this.timeEnd = data().deepCopy(fields()[3].schema(), other.timeEnd);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.X)) {
        this.X = data().deepCopy(fields()[4].schema(), other.X);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.Y)) {
        this.Y = data().deepCopy(fields()[5].schema(), other.Y);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.numberOfSamplesIntheAverage)) {
        this.numberOfSamplesIntheAverage = data().deepCopy(fields()[6].schema(), other.numberOfSamplesIntheAverage);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.cumulativeDisplacementForThisSensor)) {
        this.cumulativeDisplacementForThisSensor = data().deepCopy(fields()[7].schema(), other.cumulativeDisplacementForThisSensor);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.pushCount)) {
        this.pushCount = data().deepCopy(fields()[8].schema(), other.pushCount);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.pushTime)) {
        this.pushTime = data().deepCopy(fields()[9].schema(), other.pushTime);
        fieldSetFlags()[9] = true;
      }
    }

    /**
      * Gets the value of the 'sensor' field.
      * @return The value.
      */
    public java.lang.String getSensor() {
      return sensor;
    }

    /**
      * Sets the value of the 'sensor' field.
      * @param value The value of 'sensor'.
      * @return This builder.
      */
    public com.xplordat.rtmonitoring.avro.SmoothedVertex.Builder setSensor(java.lang.String value) {
      validate(fields()[0], value);
      this.sensor = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'sensor' field has been set.
      * @return True if the 'sensor' field has been set, false otherwise.
      */
    public boolean hasSensor() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'sensor' field.
      * @return This builder.
      */
    public com.xplordat.rtmonitoring.avro.SmoothedVertex.Builder clearSensor() {
      sensor = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'timeStart' field.
      * @return The value.
      */
    public java.lang.Long getTimeStart() {
      return timeStart;
    }

    /**
      * Sets the value of the 'timeStart' field.
      * @param value The value of 'timeStart'.
      * @return This builder.
      */
    public com.xplordat.rtmonitoring.avro.SmoothedVertex.Builder setTimeStart(long value) {
      validate(fields()[1], value);
      this.timeStart = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'timeStart' field has been set.
      * @return True if the 'timeStart' field has been set, false otherwise.
      */
    public boolean hasTimeStart() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'timeStart' field.
      * @return This builder.
      */
    public com.xplordat.rtmonitoring.avro.SmoothedVertex.Builder clearTimeStart() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'timeInstant' field.
      * @return The value.
      */
    public java.lang.Long getTimeInstant() {
      return timeInstant;
    }

    /**
      * Sets the value of the 'timeInstant' field.
      * @param value The value of 'timeInstant'.
      * @return This builder.
      */
    public com.xplordat.rtmonitoring.avro.SmoothedVertex.Builder setTimeInstant(long value) {
      validate(fields()[2], value);
      this.timeInstant = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'timeInstant' field has been set.
      * @return True if the 'timeInstant' field has been set, false otherwise.
      */
    public boolean hasTimeInstant() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'timeInstant' field.
      * @return This builder.
      */
    public com.xplordat.rtmonitoring.avro.SmoothedVertex.Builder clearTimeInstant() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'timeEnd' field.
      * @return The value.
      */
    public java.lang.Long getTimeEnd() {
      return timeEnd;
    }

    /**
      * Sets the value of the 'timeEnd' field.
      * @param value The value of 'timeEnd'.
      * @return This builder.
      */
    public com.xplordat.rtmonitoring.avro.SmoothedVertex.Builder setTimeEnd(long value) {
      validate(fields()[3], value);
      this.timeEnd = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'timeEnd' field has been set.
      * @return True if the 'timeEnd' field has been set, false otherwise.
      */
    public boolean hasTimeEnd() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'timeEnd' field.
      * @return This builder.
      */
    public com.xplordat.rtmonitoring.avro.SmoothedVertex.Builder clearTimeEnd() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'X' field.
      * @return The value.
      */
    public java.lang.Double getX() {
      return X;
    }

    /**
      * Sets the value of the 'X' field.
      * @param value The value of 'X'.
      * @return This builder.
      */
    public com.xplordat.rtmonitoring.avro.SmoothedVertex.Builder setX(double value) {
      validate(fields()[4], value);
      this.X = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'X' field has been set.
      * @return True if the 'X' field has been set, false otherwise.
      */
    public boolean hasX() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'X' field.
      * @return This builder.
      */
    public com.xplordat.rtmonitoring.avro.SmoothedVertex.Builder clearX() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'Y' field.
      * @return The value.
      */
    public java.lang.Double getY() {
      return Y;
    }

    /**
      * Sets the value of the 'Y' field.
      * @param value The value of 'Y'.
      * @return This builder.
      */
    public com.xplordat.rtmonitoring.avro.SmoothedVertex.Builder setY(double value) {
      validate(fields()[5], value);
      this.Y = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'Y' field has been set.
      * @return True if the 'Y' field has been set, false otherwise.
      */
    public boolean hasY() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'Y' field.
      * @return This builder.
      */
    public com.xplordat.rtmonitoring.avro.SmoothedVertex.Builder clearY() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'numberOfSamplesIntheAverage' field.
      * @return The value.
      */
    public java.lang.Long getNumberOfSamplesIntheAverage() {
      return numberOfSamplesIntheAverage;
    }

    /**
      * Sets the value of the 'numberOfSamplesIntheAverage' field.
      * @param value The value of 'numberOfSamplesIntheAverage'.
      * @return This builder.
      */
    public com.xplordat.rtmonitoring.avro.SmoothedVertex.Builder setNumberOfSamplesIntheAverage(long value) {
      validate(fields()[6], value);
      this.numberOfSamplesIntheAverage = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'numberOfSamplesIntheAverage' field has been set.
      * @return True if the 'numberOfSamplesIntheAverage' field has been set, false otherwise.
      */
    public boolean hasNumberOfSamplesIntheAverage() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'numberOfSamplesIntheAverage' field.
      * @return This builder.
      */
    public com.xplordat.rtmonitoring.avro.SmoothedVertex.Builder clearNumberOfSamplesIntheAverage() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'cumulativeDisplacementForThisSensor' field.
      * @return The value.
      */
    public java.lang.Double getCumulativeDisplacementForThisSensor() {
      return cumulativeDisplacementForThisSensor;
    }

    /**
      * Sets the value of the 'cumulativeDisplacementForThisSensor' field.
      * @param value The value of 'cumulativeDisplacementForThisSensor'.
      * @return This builder.
      */
    public com.xplordat.rtmonitoring.avro.SmoothedVertex.Builder setCumulativeDisplacementForThisSensor(double value) {
      validate(fields()[7], value);
      this.cumulativeDisplacementForThisSensor = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'cumulativeDisplacementForThisSensor' field has been set.
      * @return True if the 'cumulativeDisplacementForThisSensor' field has been set, false otherwise.
      */
    public boolean hasCumulativeDisplacementForThisSensor() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'cumulativeDisplacementForThisSensor' field.
      * @return This builder.
      */
    public com.xplordat.rtmonitoring.avro.SmoothedVertex.Builder clearCumulativeDisplacementForThisSensor() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'pushCount' field.
      * @return The value.
      */
    public java.lang.Long getPushCount() {
      return pushCount;
    }

    /**
      * Sets the value of the 'pushCount' field.
      * @param value The value of 'pushCount'.
      * @return This builder.
      */
    public com.xplordat.rtmonitoring.avro.SmoothedVertex.Builder setPushCount(long value) {
      validate(fields()[8], value);
      this.pushCount = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'pushCount' field has been set.
      * @return True if the 'pushCount' field has been set, false otherwise.
      */
    public boolean hasPushCount() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'pushCount' field.
      * @return This builder.
      */
    public com.xplordat.rtmonitoring.avro.SmoothedVertex.Builder clearPushCount() {
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'pushTime' field.
      * @return The value.
      */
    public java.lang.Long getPushTime() {
      return pushTime;
    }

    /**
      * Sets the value of the 'pushTime' field.
      * @param value The value of 'pushTime'.
      * @return This builder.
      */
    public com.xplordat.rtmonitoring.avro.SmoothedVertex.Builder setPushTime(long value) {
      validate(fields()[9], value);
      this.pushTime = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'pushTime' field has been set.
      * @return True if the 'pushTime' field has been set, false otherwise.
      */
    public boolean hasPushTime() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'pushTime' field.
      * @return This builder.
      */
    public com.xplordat.rtmonitoring.avro.SmoothedVertex.Builder clearPushTime() {
      fieldSetFlags()[9] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public SmoothedVertex build() {
      try {
        SmoothedVertex record = new SmoothedVertex();
        record.sensor = fieldSetFlags()[0] ? this.sensor : (java.lang.String) defaultValue(fields()[0]);
        record.timeStart = fieldSetFlags()[1] ? this.timeStart : (java.lang.Long) defaultValue(fields()[1]);
        record.timeInstant = fieldSetFlags()[2] ? this.timeInstant : (java.lang.Long) defaultValue(fields()[2]);
        record.timeEnd = fieldSetFlags()[3] ? this.timeEnd : (java.lang.Long) defaultValue(fields()[3]);
        record.X = fieldSetFlags()[4] ? this.X : (java.lang.Double) defaultValue(fields()[4]);
        record.Y = fieldSetFlags()[5] ? this.Y : (java.lang.Double) defaultValue(fields()[5]);
        record.numberOfSamplesIntheAverage = fieldSetFlags()[6] ? this.numberOfSamplesIntheAverage : (java.lang.Long) defaultValue(fields()[6]);
        record.cumulativeDisplacementForThisSensor = fieldSetFlags()[7] ? this.cumulativeDisplacementForThisSensor : (java.lang.Double) defaultValue(fields()[7]);
        record.pushCount = fieldSetFlags()[8] ? this.pushCount : (java.lang.Long) defaultValue(fields()[8]);
        record.pushTime = fieldSetFlags()[9] ? this.pushTime : (java.lang.Long) defaultValue(fields()[9]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<SmoothedVertex>
    WRITER$ = (org.apache.avro.io.DatumWriter<SmoothedVertex>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<SmoothedVertex>
    READER$ = (org.apache.avro.io.DatumReader<SmoothedVertex>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
